services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: payments-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: payments_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - payments-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d payments_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL para Temporal
  temporal-postgres:
    image: postgres:16-alpine
    container_name: temporal-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: temporal
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5433:5432"
    volumes:
      - temporal_postgres_data:/var/lib/postgresql/data
    networks:
      - payments-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal -d temporal"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Temporal Server (configuração simplificada)
  temporal:
    image: temporalio/auto-setup:1.22.0
    container_name: temporal-server
    restart: unless-stopped
    depends_on:
      temporal-postgres:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=temporal-postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_AUTHORIZATION=false
      - ENABLE_TLS=false
      - TEMPORAL_BROADCAST_ADDRESS=0.0.0.0
      - TEMPORAL_CLI_SHOW_STACKS=1
      - LOG_LEVEL=info
    ports:
      - "7233:7233"  # gRPC
      - "7234:7234"  # Membership
      - "7235:7235"  # History
      - "7239:7239"  # Worker
    networks:
      - payments-network
    healthcheck:
      test: ["CMD-SHELL", "tctl cluster health | grep SERVING || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s

  # Temporal Web UI
  temporal-ui:
    image: temporalio/ui:2.21.3
    container_name: temporal-ui
    restart: unless-stopped
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000,http://localhost:8080
      - TEMPORAL_PERMIT_WRITE_API=true
    ports:
      - "8080:8080"
    networks:
      - payments-network

volumes:
  postgres_data:
    driver: local
  temporal_postgres_data:
    driver: local

networks:
  payments-network:
    driver: bridge
